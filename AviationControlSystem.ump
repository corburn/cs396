// All units of measurement assume International Civil Aviation Organization standards

namespace aviationcontrolsystem;

class AviationControlSystem {
    public static void main(String[] args) {
        System.out.println("Initializing Aviation Control System Simulation");
        /*AviationControlSystem acs = new AviationControlSystem();
        
        AirTrafficControl here = new AirTrafficControl(50, "Here Name", "Here Place", new Pipeline(), new Pipeline());
        AirTrafficControl there = new AirTrafficControl(50, "There Name", "There Place", new Pipeline(), new Pipeline());
                
        acs.addAirport(here.getAirport());
        acs.addAirport(there.getAirport());
        
        Plane thePlane = new Plane("Risk", 666, "Mercury", "Firestorm", "CX7", 20000);
        Captain jackHarkness = new Captain();
        java.sql.Date now = new java.sql.Date(new Date().getTime());
        FlightPlan thePlan = new FlightPlan(jackHarkness, now, now, 95.0, thePlane, here.getAirport(), there.getAirport(), hereWeAre);
        thePlane.preFlightCheck();
      
        Terminal hereWeAre = new Terminal(here.getAirport());
        Terminal thereWeGo = new Terminal(there.getAirport());
        
        Passenger uno = new Passenger("Priest", 56, hereWeAre, thePlan);
        Passenger dos = new Passenger("Rabbi", 30, hereWeAre, thePlan);
        Passenger tres = new Passenger("Minister", 42, hereWeAre, thePlan);
        Passenger cuatro = new Passenger("StewieGriffin", 1, hereWeAre, thePlan);
      
        
        
        // TODO
        // - add pipelines to AirTrafficControl
        // - Plane adds itself to the takeoff pipeline
        // - AirTrafficControl state machine sees queue is not empty
        // - ATC checks all clear and grants clearance
        // - Plane takes off removing itself from the pipeline and reseting clearance
        // TODO
        // Figure out how/when ATC can reset clearance

        // The after() directives launch threads that continue to run after main has finished
        //System.out.println("End Simulation");
        //System.exit(0);*/
    }
    1 -- * Airport;
}

//class Airline {
//    0..1 -- 1..* Plane;
//    name;
//}

class Airport {
    1 -- 1..* Runway;
    //immutable name;
    //immutable address;
    // altitude in feet
    //immutable int altitude;
    // TODO close airport
    lazy boolean isEmergency;
}

class AirTrafficControl {
    // AirTrafficControl may manage a region if an Airport does not have a control tower or
    // several Airports are located in close proximity
    1 -- * Airport;
    Plane[] takeoffPipeline;
    Plane[] landingPipeline;
    // TODO
    // Aircraft should be able to request hazards information such as weather
    // (rain, ice, fog (range of visibility), wind gusts (direction, speed, etc)

    // Operating range in Nautical Miles
    immutable int range;
    // TODO
    // The plane calls this method after/during takeoff to indicate the runway is available again
    public void acknowledgeClearance(Plane plane) {
        plane.takeoff();
    }
    queued airspace {
        // TODO
        // The intended implementation is that it should idle in the MonitorAirspace state
        // with a [hasPlanesInPipeline] Guard condition to a pipeline where a single request
        // is handled before returning to the MonitorAirspace state.
        // while(hasPlanesInPipeline) {
        //    handleRequest()
        // }
        Monitor {
            entry / {
                //System.out.println(getAirport().getName() + " Air Traffic Control entering Monitor");
            }
            // Handle each request until the pipeline is empty
            //[getPipeline(0).hasPlanes()] -> TakeoffPipeline;
            //requestTakeoffClearance() -> TakeoffPipeline;
            //[getPipeline(1).hasPlanes()] -> LandingPipeline;
            //requestLandingClearance() -> LandingPipeline;
        }
        TakeoffPipeline {
            entry / {
                //System.out.println(getAirport().getName() + " Air Traffic Control entering TakeoffPipeline");
            }
            -> Monitor;
        }
        LandingPipeline {
            entry / {
                //System.out.println(getAirport().getName() + " Air Traffic Control entering LandingPipeline");
            }
            -> Monitor;
        }
    }
}

class Baggage {
}

class Captain {
    isA FlightDeckCrew;
    //name;
    //address;
    //phoneNumber;
    //homeBase;
}

// A FlightPlan must include aircraft type and special equipment
// The plane object should define an array of equipment on board
// http://en.wikipedia.org/wiki/Equipment_codes
//class Equipment {
//}

// Based on (FAA) Domestic Flight Plan Form 7233-1
// registration, color, aircraft type, and special equipment can
// can be obtained from the Plane object
class FlightPlan {
    // departure, destination, and alternate airports in the event the destination is unavailable
    * -- 2..* Airport;
    * -> * CabinCrew;
    * -> * FlightDeckCrew;
    * -> * Passenger;
    * -- 1 Plane;
    // Type of flight: VFR, IFR, DVFR, or a composite thereof
    //typeFlight;
    // Cruising speed in knots
    //int airspeed;
    //Date proposedDepartureTime;
    //lazy Date actualDepartureTime;
    // Cruising altitude as a Flight Level
    //int flightLevel
    //Proposed route of flight. The route can be made up of airways, intersections, navaids, or possibly direct.
    //Route[] route;
    // Estimated flight time in minutes
    //int estTimeEnRoute;
    // Additional information for AirTrafficControl
    //remarks;
    // Amount of fuel on board the aircraft in minutes
    //int fuelOnBoard;
    // At least one of the FlightDeckCrew must be a Captain
    //Captain captain
}

class Passenger {
    1 -- * Baggage;
    //name;
    //int age;
}

class Plane {
    // Aircraft Registration
    //immutable registration;
    //immutable int seats;
    //immutable int maxWeight;
    //immutable make;
    //immutable model;
    //immutable series;
    // Color to help search and rescue personnel identify the aircraft
    //immutable color;
    // Type of aircraft and special equipment
    // For example, a Mitsubishi Mu-2 equipped with an altitude reporting transponder and GPS would use MU2/G
    //immutable typeAircraft
    // Unscheduled general aviation will generally use registration
    // Commercial operators will use ICAO airline designator and route number
    //flightCode = registration;
    // Defaults to flight code but may be reassigned by Air Traffic Control
    //defaulted callsign = flightCode;
    // Gallons of fuel in the tanks
    // TODO fuel min / max guards
    // Cannot have negative fuel or exceed capacity
    // TODO define fuel capacity
    lazy double fuel;
    lazy int weight;
    lazy boolean isEmergency;
    // Weather deposits ice on the control surfaces
    lazy boolean hasIce;
    // TODO altitude should initialize to altitude of current airport
    int altitude;
    // A crude function to print the entry, action, and exit state transitions
    private void printTransition(String event, String state) {
        //System.out.println("Flight " + getCallsign() + " " + event + " " + state);
    }
    
    // TODO it should request AirTrafficControl add the plane to the appropriate pipeline
    public boolean requestClearance(AirTrafficControl atc) {
        return false;
    }
    private boolean hasPassengersAtTerminal() {
        //return getFlightPlan(0).getTerminal(0).hasPassengers();
        return false;
    }
    private void board() {
        /*FlightPlan plan = getFlightPlan(0);
        Terminal terminal = plan.getTerminal(0);
        List<Passenger> passengers = terminal.getPassengers();
        for(Passenger passenger : passengers) {
            plan.addPassenger(passenger);
            terminal.removePassenger(passenger);
        }*/
    }
    private void disembark(int terminal) {
        /*Terminal awesomeTerminal = getFlightPlan(0).getTerminal(terminal);
        FlightPlan awesomePlan = getFlightPlan(0);
        List<Passenger> morePassengers = awesomePlan.getPassengers();
        for (Passenger passenger : morePassengers) {
            awesomeTerminal.addPassenger(passenger);
            awesomePlan.removePassenger(passenger);
        }*/
    }
    // TODO handle emergencies (flight, passenger, etc)
    // Add declareEmergency() function and appropriate transition to all states.
    // Add [isEmergency] guarded auto transition to all state to handle emergency
    // declared in any earlier state.
    flight {
        Standby {
            entry / {
                printTransition("entering", "Standby");
            }
            // TODO: add has FlightPlan *today* Guard
            preFlightCheck() [hasFlightPlans()] -> PreFlight;
        }
        PreFlight {
            entry / {
                printTransition("entering", "PreFlight");
            }
            // TODO Guard AirTrafficControl approve (check isValid) FlightPlan
            // Verify the plane is at the first Airport
            isFlightReady() [!hasPassengersAtTerminal()] -> TakeoffPipeline;
            isFlightReady() [hasPassengersAtTerminal()] -> Board;
        }
        Board {
            entry / {
                printTransition("entering", "Board");
                board();
            }
            [isEmergency] -> Disembark;
            [!isEmergency] -> TakeoffPipeline;
        }
        TakeoffPipeline {
            entry / {
                printTransition("entering", "TakeoffPipeline");
            }
            Ready {
                entry / {
                    printTransition("entering", "Ready");
                }
                [hasIce] -> DeIce;
            }
            DeIce {
                entry / {
                    printTransition("entering", "DeIce");
                }
                // Aircraft must takeoff within the deicing fluid holdover or else wait
                // to be deiced again
                //
                // TODO the holdover period should be a constant defined by the
                // AviationControlSystem. Magic numbers buried in the code are bad practice.
                // 15 minutes
                after(15*60) [hasIce] -> DeIce;
            }
            // TODO replace with AirTrafficControl.acknowledgeClearance(Plane);
            // 'rotate' is jargon for when an aircraft lifts up from the runway
            takeoff() / {
                printTransition("transition", "TakeoffPipeline -> Transit");
            } -> Transit;
        }
        Transit {
            entry / {
                printTransition("entering", "Transit");
            }
            // TODO
            // Add transitions between AirTrafficControllers en route as the aircraft
            // enters/leaves their airspace
            -> LandingPipeline;
        }
        LandingPipeline {
            entry / {
                printTransition("entering", "LandingPipeline");
            }
            land() -> Disembark;
        }
        // TODO handle Missing In Action / Crash states
        Disembark {
            entry / {
                // Any landing you walk away from is a good landing
                printTransition("entering", "Disembark");
            }
            -> Standby;
            exit / {
                // Remove the completed FlightPlan from the queue
                // TODO: use the sorted directive to make sure flights are sorted by Date
                removeFlightPlan(getFlightPlan(0));                
            }
        }
    }
}

class Runway {
    * -> * GroundCrew;
    int capacity;
    //int id;
    boolean isLatitudinal;
  runwayState2 {
  
    Open {
      crisis -> EmergencyShutdown;
      
      Available {
        planeDeparting -> InUse;
		planeJustLanded -> InUse;
        repair -> Reconstruction;
		weather -> Reconstruction;
      }
      
      InUse {
        planeDeparted -> Available;
        planeReachesTerminal -> Available;
      }
    }
  
    Closed {
      EmergencyShutdown {
        crisisResolved -> RunwaySafe;
      }
      
      RunwaySafe {
        opening -> Open;
      }
      
      Reconstruction {
          Repair {
            completed -> Inspect;
          }
          Inspect { 
            upToStandard -> RunwaySafe;
            notUpToStandard -> Repair; 
          }
      }
    } 
  }
    direction {
        Undefined {
            [isLatitudinal] -> North;
            [!isLatitudinal] -> East;
        }
        North {
            changeDirection() -> South;
        }
        South {
            changeDirection() -> North;
        }
        East {
            changeDirection() -> West;
        }
        West {
            changeDirection() -> East;
        }
    }
}

class Terminal {
  * -- 1 Airport;
  * -> * Passenger;
}

// Loadmaster, crew member on cargo aircraft responsible for loading freight and personnel and the weight and balance of the aircraft.
// Purser or Customer Service Manager is responsible for the cabin crew as a team leader.
// Flight attendant or Cabin Crew, crew member responsible for the safety of passengers.
interface CabinCrew {
    //isA FlightCrew;
}

// Captain, the pilot designated as the Pilot in command[1]
// Co-pilot, another pilot who is not the pilot in command,[1] normally called the First Officer.
// First officer, a pilot who is not the pilot in command.
// Second officer
// Third officer
// Flight engineer, on older aircraft they were the crew member responsible for engines, systems and fuel management.
interface FlightDeckCrew {
    //isA FlightCrew;
}

// Regulations limit work hours and minimum rest hours
//interface FlightCrew {
//}

// maintenance, fueling, luggage, etc
interface GroundCrew {
}