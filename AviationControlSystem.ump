//generate Java;
namespace aviationcontrolsystem;

//interface Personnel {
//}

class AviationControlSystem {
    public static void main(String[] args) {
        System.out.println("Initializing Aviation Control System Simulation");
        AviationControlSystem acs = new AviationControlSystem();

        acs.addAirport(new Airport("Here Name", "Here Place", 0, 5, acs));
        acs.addAirport(new Airport("There Name", "There Place", 0, 5, acs));

        Plane plane = new Plane("1234", 5);

        System.out.println("End Simulation");
        // BUG: the simulation was not exiting without this statement
        System.exit(0);
    }
    1 -- * Airport;
}


class AirCrew {
}

class Airport {
    1 -- 1 AirTrafficControl;
    1 -- 1..* Runway;
    immutable name;
    immutable address;
    immutable int altitude;
    lazy boolean isEmergency;
}

class AirTrafficControl {
    int timeout;
    public boolean getClearance() {
        if(this.getAirport().getIsEmergency()) {
            return false;
        }
        //TODO
        return false;
    }
    queued sm {
        MonitorAirspace {
        }
    }
}

class Baggage {
}

class FlightPlan {
    * -- 2..* Airport;
    // Discovered UMPLE imports java.sql.Date when trying to define
    // depend java.util.Date
    // TODO associate departure and arrival times with each airport
    Date start;
    Date end;
}

class GroundCrew {
}

class Passenger {
    1 -- * Baggage;
    name;
    int age;
}

class Plane {
    // TODO cancel/modify FlightPlan
    1 -- * FlightPlan;
    1 -- 2..* AirCrew;
    1 -- * Passenger;
    // Aircraft Registration
    immutable registration;
    immutable int seats;
    // lazy because a private aircraft may not be associated with an airline
    lazy immutable airline;
    // Unscheduled general aviation will generally use registration
    // Commercial operators will use ICAO airline designator and route number
    flightCode = registration;
    // Defaults to flight code but may be reassigned by Air Traffic Control
    defaulted callsign = flightCode;
    lazy double fuel;
    lazy boolean isEmergency;
    // TODO AirTrafficControl.getClearance()
    lazy boolean isCleared;
    lazy boolean hasIce;
    private void printTransition(String event, String state) {
        System.out.println(this.toString() + " " + event + " " + state);
    }
    Flight {
        FlightPrep {
            entry / {
                printTransition("entry", "FlightPrep");
            }
            -> Board;
        }
        Board {
            entry / {
                printTransition("entry", "Board");
            }
            [isEmergency] -> Disembark;
            [!isEmergency] -> TakeoffPrep;
        }
        TakeoffPrep {
            entry / {
                printTransition("entry", "TakeoffPrep");
            }
            -> TakeoffPipeline;
        }
        TakeoffPipeline {
            entry / {
                printTransition("entry", "TakeoffPipeline");
            }
            Standby {
                entry / {
                    printTransition("entry", "Standby");
                }
                [hasIce] -> DeIce;
            }
            DeIce {
                entry / {
                    printTransition("entry", "DeIce");
                }
                // Aircraft must takeoff within the deicing fluid holdover or else wait
                // to be deiced again
                //
                // TODO the holdover period should be a constant defined by the
                // AviationControlSystem
                // 15 minutes
                after(15*60) [hasIce] -> DeIce;
            }
            // The DeIce transition will be ignored without a guard condition
            //
            // TODO get timeout from local AirTrafficControl
            // 60 minutes (arbitrary)
            after(60*60) [!isCleared] -> TakeoffPrep;
            takeoff() [isCleared] -> Transit;
        }
        Transit {
            entry / {
                printTransition("entry", "Transit");
            }
            -> LandingPipeline;
        }
        LandingPipeline {
            entry / {
                printTransition("entry", "LandingPipeline");
            }
            land() [isCleared] -> Disembark;
        }
        Disembark {
            entry / {
                printTransition("entry", "Disembark");
            }
            //-> Standby;
        }
    }
}

class Runway {
    1..* -- * GroundCrew;
    int capacity;
    int id;
    boolean isLatitudinal;
    status {
        Open {
            Free {
                -> Occupied;
            }
            Occupied {
            }
        }
        Closed {
            Emergency {
                -> ReadyToOpen;
            }
            Maintenance {
                -> ReadyToOpen;
            }
            ReadyToOpen {
            }
        }
    }
    direction {
        Undefined {
            [isLatitudinal] -> North;
            [!isLatitudinal] -> East;
        }
        North {
            changeDirection() -> South;
        }
        South {
            changeDirection() -> North;
        }
        East {
            changeDirection() -> West;
        }
        West {
            changeDirection() -> East;
        }
    }
    //  * -> * Personnel;
}
