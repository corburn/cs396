// All units of measurement assume International Civil Aviation Organization standards

namespace aviationcontrolsystem;

//interface Personnel {
//}

class AviationControlSystem {
    public static void main(String[] args) {
        System.out.println("Initializing Aviation Control System Simulation");
        //AviationControlSystem acs = new AviationControlSystem();
                
        //acs.addAirport(new Airport("Here Name", "Here Place", 5, acs));
        //acs.addAirport(new Airport("There Name", "There Place", 5, acs));
        
        // TODO
        // - add pipelines to AirTrafficControl
        // - Plane adds itself to the takeoff pipeline
        // - AirTrafficControl state machine sees queue is not empty
        // - ATC checks all clear and grants clearance
        // - Plane takes off removing itself from the pipeline and reseting clearance
        // TODO
        // Figure out how/when ATC can reset clearance

        // The after() directives launch threads that continue to run after main has finished
        //System.out.println("End Simulation");
        //System.exit(0);
    }
    1 -- * Airport;
}

// Captain, the pilot designated as the Pilot in command[1]
// Co-pilot, another pilot who is not the pilot in command,[1] normally called the First Officer.
// First officer, a pilot who is not the pilot in command.
// Second officer
// Third officer
// Flight engineer, on older aircraft they were the crew member responsible for engines, systems and fuel management.
interface FlightDeckCrew {
    isA FlightCrew;
}

// Loadmaster, crew member on cargo aircraft responsible for loading freight and personnel and the weight and balance of the aircraft.
// Purser or Customer Service Manager is responsible for the cabin crew as a team leader.
// Flight attendant or Cabin Crew, crew member responsible for the safety of passengers.
interface CabinCrew {
    isA FlightCrew;
}

// Regulations limit work hours and minimum rest hours
interface FlightCrew {
}

class Airport {
    1 -- 1 AirTrafficControl;
    1 -- 1..* Runway;
    immutable name;
    immutable address;
    // altitude in feet
    //immutable int altitude;
    // TODO close airport
    lazy boolean isEmergency;
}

// Criticism: the assignment specification requires every airport have a control unit,
// however, not all airports will have a control unit in which case a unit would have
// authority over a region.
class AirTrafficControl {
    // TODO
    // Aircraft should be able to request hazards information such as weather
    // (rain, ice, fog (range of visibility), wind gusts (direction, speed, etc)
    // 
    //int timeout;
    // Operating range in Nautical Miles
    int range;
    public void requestClearance(Plane plane) {
        // TODO
    }
    public void acknowledgeClearance(Plane plane) {
        // TODO
    }
    queued sm {
        // TODO a state machine that monitors and manages aircraft in its airspace
        MonitorAirspace {
        }
        TakeoffPipeline {
            -> MonitorAirspace;
        }
        LandingPipeline {
            -> MonitorAirspace;
        }
    }
}

class Baggage {
}

class FlightPlan {
    // origin and destination
    * -- 2 Airport;
    //* -- 2..* AirCrew;
    // Discovered UMPLE imports java.sql.Date when trying to define
    // depend java.util.Date
    // Departure and arrival times
    Date start;
    Date end;
    // Minimum gallons of fuel required to complete the flight
    double minFuel;
}

// TODO convert to interface for maintenance, fueling, luggage, etc roles
class GroundCrew {
}

class Passenger {
    * -- 1..* FlightPlan;
    1 -- * Baggage;
    name;
    int age;
}

class Plane {
    // TODO cancel/modify FlightPlan
    1 -- * FlightPlan;
    // Aircraft Registration
    immutable registration;
    immutable int seats;
    immutable make;
    immutable model;
    immutable series;
    // lazy because a private aircraft may not be associated with an airline
    lazy immutable airline;
    // Unscheduled general aviation will generally use registration
    // Commercial operators will use ICAO airline designator and route number
    flightCode = registration;
    // Defaults to flight code but may be reassigned by Air Traffic Control
    defaulted callsign = flightCode;
    // Gallons of fuel in the tanks
    lazy double fuel;
    lazy boolean isEmergency;
    // TODO AirTrafficControl.getClearance()
    lazy boolean isCleared;
    // Weather deposits ice on the control surfaces
    lazy boolean hasIce;
    // TODO altitude should initialize to altitude of current airport
    int altitude;
    private void printTransition(String event, String state) {
        System.out.println("Flight " + getCallsign() + " " + event + " " + state);
    }
    Flight {
        Standby {
            entry / {
                printTransition("entering", "Hangar");
            }
            // TODO: Guard has FlightPlan today
            preFlightCheck() [hasFlightPlans()] -> PreFlight;
        }
        PreFlight {
            entry / {
                printTransition("entering", "PreFlight");
            }
            -> Board;
        }
        Board {
            entry / {
                printTransition("entering", "Board");
            }
            [isEmergency] -> Disembark;
            // TODO AirTrafficControl.requestClearance(this);
            [!isEmergency] -> TakeoffPipeline;
        }
        Ready {
        }
        TakeoffPipeline {
            entry / {
                printTransition("entering", "TakeoffPipeline");
            }
            Idle {
                entry / {
                    printTransition("entering", "Idle");
                }
                [hasIce] -> DeIce;
            }
            DeIce {
                entry / {
                    printTransition("entering", "DeIce");
                }
                // Aircraft must takeoff within the deicing fluid holdover or else wait
                // to be deiced again
                //
                // TODO the holdover period should be a constant defined by the
                // AviationControlSystem
                // 15 minutes
                after(15*60) [hasIce] -> DeIce;
            }
            // The DeIce transition will be ignored without a guard condition
            //
            // TODO get timeout from local AirTrafficControl
            // 60 minutes (arbitrary)
            after(60*60) [!isCleared] / {
                printTransition("transition", "TakeoffPipeline -> TakeoffPrep");
            } -> Ready;
            // TODO replace with AirTrafficControl.acknowledgeClearance(Plane);
            rotate() / {
                printTransition("transition", "TakeoffPipeline -> Transit");
            } -> Transit;
            exit / {
                //getAirTrafficControl().acknowledgeClearance(this);
            }
        }
        Transit {
            entry / {
                printTransition("entering", "Transit");
            }
            // TODO
            // Transition between AirTrafficController en route
            -> LandingPipeline;
        }
        LandingPipeline {
            entry / {
                printTransition("entering", "LandingPipeline");
            }
            land() [isCleared] -> Disembark;
        }
        // TODO Missing In Action / Crash
        Disembark {
            entry / {
                // Any landing you walk away from is a good landing
                printTransition("entering", "Disembark");
            }
            -> Standby;
            exit / {
                // Remove the completed FlightPlan from the queue
                // TODO: use the sorted directive to make sure flights are sorted by Date
                removeFlightPlan(getFlightPlan(0));                
            }
        }
    }
}

class Runway {
    1..* -- * GroundCrew;
    int capacity;
    int id;
    boolean isLatitudinal;
    status {
        Open {
            Free {
                -> Occupied;
            }
            Occupied {
            }
        }
        Closed {
            Emergency {
                -> ReadyToOpen;
            }
            Maintenance {
                -> ReadyToOpen;
            }
            ReadyToOpen {
            }
        }
    }
    direction {
        Undefined {
            [isLatitudinal] -> North;
            [!isLatitudinal] -> East;
        }
        North {
            changeDirection() -> South;
        }
        South {
            changeDirection() -> North;
        }
        East {
            changeDirection() -> West;
        }
        West {
            changeDirection() -> East;
        }
    }
    //  * -> * Personnel;
}
