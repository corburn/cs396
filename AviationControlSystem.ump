// All units of measurement assume International Civil Aviation Organization standards

namespace aviationcontrolsystem;

//interface Personnel {
//}

class AviationControlSystem {
    public static void main(String[] args) {
        System.out.println("Initializing Aviation Control System Simulation");
        AviationControlSystem acs = new AviationControlSystem();

        Airport here = new Airport("Here Name", "Here Place", acs);
        Airport there = new Airport("There Name", "There Place", acs);
        
        Airport[] airports = { here, there };
        
        AirCrew[] airCrew = { new AirCrew(), new AirCrew() };

        Plane plane = new Plane("1234", 5);
        
        java.sql.Date now = new java.sql.Date(new Date().getTime());
        
        FlightPlan flightPlan = new FlightPlan(now, now, 36000.0, plane, airports, airCrew);
        
        plane.addFlightPlan(flightPlan);
        plane.preFlightCheck();
        
        // TODO
        // - add pipelines to AirTrafficControl
        // - Plane adds itself to the takeoff pipeline
        // - AirTrafficControl state machine sees queue is not empty
        // - ATC checks all clear and grants clearance
        // - Plane takes off removing itself from the pipeline and reseting clearance
        // TODO
        // Figure out how/when ATC can reset clearance
        plane.setIsCleared(true);
        plane.takeoff();
        
        acs.addAirport(here);
        acs.addAirport(there);

        // The after() directives launch threads that continue to run after main has finished
        //System.out.println("End Simulation");
        //System.exit(0);
    }
    1 -- * Airport;
}

class AirCrew {
}

class Airport {
    1 -- 1 AirTrafficControl;
    1 -- 1..* Runway;
    immutable name;
    immutable address;
    // altitude in feet
    //immutable int altitude;
    // TODO close airport
    lazy boolean isEmergency;
}

// Criticism: the assignment specification requires every airport have a control unit,
// however, not all airports will have a control unit in which case a unit would have
// authority over a region.
class AirTrafficControl {
    //\int timeout;
    queued sm {
        // TODO a state machine that monitors and manages aircraft in its airspace
        MonitorAirspace {
        }
    }
}

class Baggage {
}

class FlightPlan {
    // origin and destination
    * -- 2 Airport;
    * -- * Passenger;
    * -- 2 AirCrew;
    // Discovered UMPLE imports java.sql.Date when trying to define
    // depend java.util.Date
    // TODO associate departure and arrival times with each airport
    Date start;
    Date end;
    // Minimum gallons of fuel required to complete the flight
    double minFuel;
}

class GroundCrew {
}

class Passenger {
    1 -- * Baggage;
    name;
    int age;
}

class Plane {
    // TODO cancel/modify FlightPlan
    1 -- * FlightPlan;
    // Aircraft Registration
    immutable registration;
    immutable int seats;
    // lazy because a private aircraft may not be associated with an airline
    lazy immutable airline;
    // Unscheduled general aviation will generally use registration
    // Commercial operators will use ICAO airline designator and route number
    flightCode = registration;
    // Defaults to flight code but may be reassigned by Air Traffic Control
    defaulted callsign = flightCode;
    // Gallons of fuel in the tanks
    lazy double fuel;
    lazy boolean isEmergency;
    // TODO AirTrafficControl.getClearance()
    lazy boolean isCleared;
    // Weather deposits ice on the control surfaces
    lazy boolean hasIce;
    private void printTransition(String event, String state) {
        System.out.println("Flight " + getCallsign() + " " + event + " " + state);
    }
    Flight {
        Hangar {
            entry / {
                printTransition("entering", "Hangar");
            }
            // TODO: Guard has FlightPlan today
            preFlightCheck() [hasFlightPlans()] -> PreFlight;
        }
        PreFlight {
            entry / {
                printTransition("entering", "PreFlight");
            }
            -> Board;
        }
        Board {
            entry / {
                printTransition("entering", "Board");
            }
            [isEmergency] -> Disembark;
            [!isEmergency] -> TakeoffPrep;
        }
        TakeoffPrep {
            entry / {
                printTransition("entering", "TakeoffPrep");
            }
            -> TakeoffPipeline;
        }
        TakeoffPipeline {
            entry / {
                printTransition("entering", "TakeoffPipeline");
            }
            Standby {
                entry / {
                    printTransition("entering", "Standby");
                }
                [hasIce] -> DeIce;
            }
            DeIce {
                entry / {
                    printTransition("entering", "DeIce");
                }
                // Aircraft must takeoff within the deicing fluid holdover or else wait
                // to be deiced again
                //
                // TODO the holdover period should be a constant defined by the
                // AviationControlSystem
                // 15 minutes
                after(15*60) [hasIce] -> DeIce;
            }
            // The DeIce transition will be ignored without a guard condition
            //
            // TODO get timeout from local AirTrafficControl
            // 60 minutes (arbitrary)
            after(60*60) [!isCleared] / {
                printTransition("transition", "TakeoffPipeline -> TakeoffPrep");
            } -> TakeoffPrep;
            takeoff() [isCleared] / {
                printTransition("transition", "TakeoffPipeline -> Transit");
            } -> Transit;
        }
        Transit {
            entry / {
                printTransition("entering", "Transit");
            }
            -> LandingPipeline;
        }
        LandingPipeline {
            entry / {
                printTransition("entering", "LandingPipeline");
            }
            land() [isCleared] -> Disembark;
        }
        Disembark {
            entry / {
                printTransition("entering", "Disembark");
            }
            //-> Standby;
        }
    }
}

class Runway {
    1..* -- * GroundCrew;
    int capacity;
    int id;
    boolean isLatitudinal;
    status {
        Open {
            Free {
                -> Occupied;
            }
            Occupied {
            }
        }
        Closed {
            Emergency {
                -> ReadyToOpen;
            }
            Maintenance {
                -> ReadyToOpen;
            }
            ReadyToOpen {
            }
        }
    }
    direction {
        Undefined {
            [isLatitudinal] -> North;
            [!isLatitudinal] -> East;
        }
        North {
            changeDirection() -> South;
        }
        South {
            changeDirection() -> North;
        }
        East {
            changeDirection() -> West;
        }
        West {
            changeDirection() -> East;
        }
    }
    //  * -> * Personnel;
}
